type User {
	id: ID!
	name: String
	address: Address
	friends(top: Int): [Friend]
	posts(top: Int): [Post]
}
type Address {
	id: ID!
	city: String
	province: String
	country: String
}
type Friend {
	id: ID!
	name: String
}
type Post {
	id: ID!
	content: String
	comments(top: Int): [Comment]
}
type Comment {
	id: ID!
	name: String
	content: String
}
input PostInput {
	content: String
}
input CommentInput {
	name: String
	content: String
}
input FriendInput {
	name: String
}
input AddressInput {
	city: String
	province: String
	country: String
}
type Query {
	allUsers: [User]
	userById(id: ID!): User
}
type Mutation {
	addUser(name: String!, address: AddressInput!): User
	deleteUser(userId: ID!): String
	addPost(userId: Int!, post: PostInput!): User
	updatePost(userId: Int!, postId: ID!, post: PostInput): User
	deletePost(userId: Int!, postId: ID!): User
	addComment(postId: Int!, comment: CommentInput!): Post
	updateComment(postId: Int!, commentId: ID!, comment: CommentInput!): Post
	deleteComment(postId: Int!, commentId: ID!): Post
}
schema {
	query: Query
	mutation: Mutation
}
